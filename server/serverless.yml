service: actually-colab-editor

useDotenv: true

plugins:
  - serverless-stage-manager
  - serverless-webpack
  - serverless-offline
  - serverless-domain-manager

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage,'dev'}
  region: us-east-1

  logs:
    restApi: true
    websocket: true

  environment:
    EXECUTION_STAGE: ${self:provider.stage}
    AWS_DEPLOYMENT_REGION: ${self:provider.region}

    AC_PGSQL_HOST: ${env:DB_HOST}
    AC_PGSQL_USER: ${env:DB_USERNAME}
    AC_PGSQL_PASSWORD: ${env:DB_PASSWORD}
    AC_PGSQL_DATABASE: ${env:DB_NAME}

    AC_PGSQL_USERS_TABLE_NAME: ${self:custom.pgsqlTableNames.usersTableName}
    AC_PGSQL_NOTEBOOKS_TABLE_NAME: ${self:custom.pgsqlTableNames.notebooksTableName}
    AC_PGSQL_NOTEBOOK_ACCESS_LEVELS_TABLE_NAME: ${self:custom.pgsqlTableNames.notebookAccessLevelsTableName}
    AC_PGSQL_CELLS_TABLE_NAME: ${self:custom.pgsqlTableNames.cellsTableName}
    AC_PGSQL_OUTPUTS_TABLE_NAME: ${self:custom.pgsqlTableNames.outputsTableName}
    AC_PGSQL_ACTIVE_SESSIONS_TABLE_NAME: ${self:custom.pgsqlTableNames.activeSessionsTableName}
    AC_PGSQL_WORKSHOPS_TABLE_NAME: ${self:custom.pgsqlTableNames.workshopsTableName}
    AC_PGSQL_WORKSHOP_ACCESS_LEVELS_TABLE_NAME: ${self:custom.pgsqlTableNames.workshopAccessLevelsTableName}

    GOOGLE_AUTH_WEB_CLIENT_ID: ${env:GOOGLE_AUTH_WEB_CLIENT_ID}
    GOOGLE_AUTH_WEB_CLIENT_SECRET: ${env:GOOGLE_AUTH_WEB_CLIENT_SECRET}
    PROD_AUTH_SECRET: ${env:PROD_AUTH_SECRET}

package:
  individually: true

custom:
  stages:
    - dev
    - production

  pgsqlTableNames:
    usersTableName: User
    notebooksTableName: Notebook
    notebookAccessLevelsTableName: NotebookAccessLevel
    cellsTableName: Cell
    outputsTableName: Output
    activeSessionsTableName: ActiveSession
    workshopsTableName: Workshop
    workshopAccessLevelsTableName: WorkshopAccessLevel

  customDomain:
    rest:
      domainName: rest.api.actuallycolab.org
      stage: ${opt:stage,'dev'}
      basePath: ${opt:stage,'dev'}
      certificateName: '*.api.actuallycolab.org'
      createRoute53Record: true
      endpointType: regional
      securityPolicy: tls_1_2
    websocket:
      domainName: ws.api.actuallycolab.org
      stage: ${opt:stage,'dev'}
      basePath: ${opt:stage,'dev'}
      certificateName: '*.api.actuallycolab.org'
      createRoute53Record: true
      endpointType: regional
      securityPolicy: tls_1_2

  serverless-offline:
    stage: ${self:provider.stage}

  webpack:
    webpackConfig: 'webpack.config.ts'
    packager: 'yarn'
    includeModules:
      forceInclude:
        - pg
      forceExclude:
        - aws-sdk
    packagerOptions:
      noFrozenLockfile: true

  restCorsPolicy:
    origins:
      - 'http://localhost:4000'
      - 'https://app.actuallycolab.org'
    headers:
      - Content-Type
      - X-Amz-Date
      - Authorization
      - X-Api-Key
      - X-Amz-Security-Token
      - X-Amz-User-Agent
    allowCredentials: false

  restAuthorizerConfig:
    name: rest-authorizer
    identitySource: method.request.header.Authorization
    type: token

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'

functions:
  rest-authorizer:
    handler: src/authorizer/lambda-authorizer.rest
  socket-authorizer:
    handler: src/authorizer/lambda-authorizer.socket

  login:
    handler: src/authorizer/login.handler
    events:
      - http:
          path: /login
          method: post
          cors: ${self:custom.restCorsPolicy}

  GET-notebooks:
    handler: src/rest/get-notebooks.handler
    events:
      - http:
          path: /notebooks
          method: get
          cors: ${self:custom.restCorsPolicy}
          authorizer: ${self:custom.restAuthorizerConfig}

  GET-notebook-contents:
    handler: src/rest/get-notebook-contents.handler
    events:
      - http:
          path: /notebook/{nb_id}
          method: get
          cors: ${self:custom.restCorsPolicy}
          authorizer: ${self:custom.restAuthorizerConfig}

  POST-notebook:
    handler: src/rest/post-notebook.handler
    events:
      - http:
          path: /notebook
          method: post
          cors: ${self:custom.restCorsPolicy}
          authorizer: ${self:custom.restAuthorizerConfig}

  share-notebook:
    handler: src/rest/share-notebook.handler
    events:
      - http:
          path: /notebook/{nb_id}/share
          method: post
          cors: ${self:custom.restCorsPolicy}
          authorizer: ${self:custom.restAuthorizerConfig}

  socket-connection:
    handler: src/socket/connection.handler

    events:
      - websocket:
          route: $connect
          authorizer:
            name: socket-authorizer
            identitySource: route.request.querystring.sessionToken

      - websocket:
          route: $disconnect
      - websocket:
          route: $default

  socket-open-notebook:
    handler: src/socket/notebook/open-notebook.handler

    events:
      - websocket:
          route: open_notebook

  socket-close-notebook:
    handler: src/socket/notebook/close-notebook.handler

    events:
      - websocket:
          route: close_notebook

  socket-edit-cell:
    handler: src/socket/cell/edit-cell.handler

    events:
      - websocket:
          route: edit_cell

  socket-create-cell:
    handler: src/socket/cell/create-cell.handler

    events:
      - websocket:
          route: create_cell

  socket-lock-cell:
    handler: src/socket/cell/lock-cell.handler

    events:
      - websocket:
          route: lock_cell

  socket-unlock-cell:
    handler: src/socket/cell/unlock-cell.handler

    events:
      - websocket:
          route: unlock_cell

  socket-update-output:
    handler: src/socket/cell/update-output.handler

    events:
      - websocket:
          route: update_output
