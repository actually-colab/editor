service: actually-colab-editor

plugins:
  - serverless-stage-manager
  - serverless-webpack
  - serverless-offline
  - serverless-dynamodb-local

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage,'dev'}
  region: us-east-1

  iamRoleStatements:
  - Effect: 'Allow'
    Action:
      - dynamodb:Query
      - dynamodb:Scan
      - dynamodb:GetItem
      - dynamodb:PutItem
      - dynamodb:UpdateItem
      - dynamodb:DeleteItem
    Resource:
      - "Fn::GetAtt": [cellsTable, Arn]
      - "Fn::GetAtt": [outputsTable, Arn]

  environment:
    EXECUTION_STAGE: ${self:provider.stage}
    AWS_DEPLOYMENT_REGION: ${self:provider.region}

    AC_DDB_CELLS_TABLE_NAME: ${self:custom.dynamoTableNames.cellsTableName}
    AC_DDB_OUTPUTS_TABLE_NAME: ${self:custom.dynamoTableNames.outputsTableName}

    AC_PGSQL_HOST: localhost
    AC_PGSQL_USER: admin
    AC_PGSQL_PASSWORD: password
    AC_PGSQL_DATABASE: AC-dev
    AC_PGSQL_USERS_TABLE_NAME: ${self:custom.pgsqlTableNames.usersTableName}
    AC_PGSQL_NOTEBOOKS_TABLE_NAME: ${self:custom.pgsqlTableNames.notebooksTableName}

custom:
  stages:
    - dev

  dynamoTableNames:
    cellsTableName: ${self:service}-${self:provider.stage}-Cell
    outputsTableName: ${self:service}-${self:provider.stage}-Output

  pgsqlTableNames:
    usersTableName: User
    notebooksTableName: Notebook
    notebookAccessLevelsTableName: NotebookAccessLevel

  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      seed: true
      convertEmptyValues: true
      dbPath: "./.dynamodb/db"

  serverless-offline:
    httpPort: 4000
    stage: ${self:provider.stage}

  webpack:
    webpackConfig: 'webpack.config.ts'
    packager: 'yarn'
    includeModules: true

functions:
  test:
    handler: src/index.handler
    events:
      - http:
          path: /test
          method: get
          cors: true
          authorizer:
            name: authorizer
            identitySource: method.request.header.Authorization
            type: token

  authorizer:
    handler: src/authorizer/authorizer.handler

  login:
    handler: src/authorizer/login.handler
    events:
      - http:
          path: /login
          method: post 
          cors: true

  GET-notebooks:
    handler: src/rest/get-notebooks.handler
    events:
      - http:
          path: /notebooks
          method: get
          cors: true

  POST-notebook:
    handler: src/rest/post-notebook.handler
    events:
      - http:
          path: /notebook
          method: post
          cors: true

  Share-notebook:
    handler: src/rest/share-notebook.handler
    events:
      - http:
          path: /notebook/{nb_id}/share
          method: post
          cors: true
  
  socket-connection:
    handler: src/socket/connection.handler

    events:
      - websocket:
          route: $connect
      - websocket:
          route: $disconnect
      - websocket:
          route: $default

resources:
  Resources:
    cellsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.dynamoTableNames.cellsTableName}
        AttributeDefinitions:
          - AttributeName: cell_id
            AttributeType: S
          - AttributeName: nb_id
            AttributeType: S
        KeySchema:
          - AttributeName: cell_id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: NotebookIdIndex
            KeySchema:
              - AttributeName: nb_id
                KeyType: HASH
            Projection:
              ProjectionType: 'ALL'
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    outputsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.dynamoTableNames.outputsTableName}
        AttributeDefinitions:
          - AttributeName: output_id
            AttributeType: S
          - AttributeName: cell_id
            AttributeType: S
          - AttributeName: uid
            AttributeType: S
        KeySchema:
          - AttributeName: output_id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: CellIdIndex
            KeySchema:
              - AttributeName: cell_id
                KeyType: HASH
            Projection:
              ProjectionType: 'ALL'
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
          - IndexName: UserIdIndex
            KeySchema:
              - AttributeName: uid
                KeyType: HASH
            Projection:
              ProjectionType: 'ALL'
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
